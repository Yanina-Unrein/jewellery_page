---
const { categories, descriptions } = Astro.props;
---

<div class="jewelry-categories">
  <div class="categories-container">
    <div class="mobile-categories">
      <div class="carousel">
        {categories && categories.length > 0 ? (
          categories.map((category) => (
            <button class="category-button" data-category={category}>
              {category}
            </button>
          ))
        ) : (
          <p>No categories available.</p>
        )}
      </div>
    </div>
    <div class="desktop-categories">
      {categories && categories.length > 0 ? (
        categories.map((category) => (
          <button class="category-button" data-category={category}>
            {category}
          </button>
        ))
      ) : (
        <p>No categories available.</p>
      )}
    </div>
  </div>

  {categories && categories.length > 0 ? (
    categories.map((category) => {
      const descriptionKey = category.toLowerCase().replace(/\s+/g, "_");
      return (
        <div class="gallery" id={`gallery-${category}`}>
          <p>{descriptions[descriptionKey]}</p>
          {/* Verifica si la propiedad 'images' existe en la categorÃ­a */}
          {category.images && category.images.length > 0 ? (
            category.images.map((image) => (
              <img src={image} alt={category} loading="lazy" />
            ))
          ) : (
            <p>No images available.</p>
          )}
        </div>
      );
    })
  ) : (
    <p>No categories available.</p>
  )}
</div>

<script>
  type CategoryId = string | null;

  const initializeCategories = (): void => {
    const buttons = document.querySelectorAll<HTMLButtonElement>('.category-button');
    const galleries = document.querySelectorAll<HTMLDivElement>('.gallery');
    let activeCategory: CategoryId = null;

    buttons.forEach(button => {
      button.addEventListener('click', () => {
        const categoryId = button.getAttribute('data-category');
        const targetGallery = document.getElementById(`gallery-${categoryId}`);

        if (!targetGallery) return;

        if (activeCategory === categoryId) {
          targetGallery.classList.remove('active');
          button.classList.remove('active');
          activeCategory = null;
        } else {
          galleries.forEach(gallery => gallery.classList.remove('active'));
          buttons.forEach(btn => btn.classList.remove('active'));
          targetGallery.classList.add('active');
          button.classList.add('active');
          activeCategory = categoryId;
        }
      });
    });
  };

  document.addEventListener('DOMContentLoaded', initializeCategories);
</script>


<script>
  type CategoryId = string | null;

  const initializeCategories = (): void => {
    const buttons = document.querySelectorAll<HTMLButtonElement>('.category-button');
    const galleries = document.querySelectorAll<HTMLDivElement>('.gallery');
    let activeCategory: CategoryId = null;

    buttons.forEach(button => {
      button.addEventListener('click', () => {
        const categoryId = button.getAttribute('data-category');
        const targetGallery = document.getElementById(`gallery-${categoryId}`);

        if (!targetGallery) return;

        if (activeCategory === categoryId) {
          targetGallery.classList.remove('active');
          button.classList.remove('active');
          activeCategory = null;
        } else {
          galleries.forEach(gallery => gallery.classList.remove('active'));
          buttons.forEach(btn => btn.classList.remove('active'));
          targetGallery.classList.add('active');
          button.classList.add('active');
          activeCategory = categoryId;
        }
      });
    });
  };

  document.addEventListener('DOMContentLoaded', initializeCategories);
</script>

<style>
  .jewelry-categories {
    padding: 1rem;
    max-width: 1200px;
    margin: 0 auto;
  }

  .categories-container {
    padding-bottom: 1rem;
  }

  .category-button {
    opacity: 1 !important; 
    background: none;
    color: var(--black);
    border: none;
    padding: 1rem;
    cursor: pointer;
    font-size: 1rem;
    transition: all 0.3s ease;
    margin: 0.5rem;
    letter-spacing: 1px;
    flex-shrink: 0;
    transform: none !important;
    white-space: normal; 
    word-wrap: break-word; 
    word-break: break-word; 
    max-width: 150px;
    min-height: 50px; 
    display: flex;
    align-items: center;
    justify-content: center;
    text-align: center;
  }

  .category-button:hover,
  .category-button.active {
    box-shadow: 0 4px 12px rgba(212, 175, 55, 0.3);
    background: #5a4a42a8;
    color: var(--linen);
    opacity: 1; 
  }

  .gallery {
    display: none;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1.5rem;
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .gallery.active {
    display: grid;
    opacity: 1;
  }

  .gallery img {
    width: 100%;
    height: 300px;
    object-fit: cover;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s ease;
  }

  .gallery img:hover {
    transform: scale(1.05);
  }

  @media (max-width: 500px) {
    .desktop-categories {
      display: none;
    }

    .categories-container{
      padding: 0;
    }

    .mobile-categories {
      overflow: hidden;
    }

    .carousel {
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      padding: 1rem;
      gap: 0.5rem;

    }

    .carousel .category-button {
      margin: 0;
      padding: 0.8rem 1.5rem;
      font-size: 0.9rem;
    }

    .gallery {
      grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
      gap: 1rem;
    }

    .gallery img {
      height: 200px;
    }
  }


  @media (min-width: 501px) {
    .mobile-categories {
      display: none;
    }

    .desktop-categories {
      display: flex;
      justify-content: center;
      flex-wrap: wrap;
    }
  }
</style>

