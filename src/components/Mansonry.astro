---
const images = Array.from({ length: 13 }, (_, i) => `/mansonry/image-${i + 1}.svg`);
---

<div class="container">
  <div class="masonry-gallery">
    {
      images.map((src, index) => (
        <div class={`masonry-item item-${index + 1}`}>
          <img
            src={src}
            alt={`Imagen ${index + 1}`}
            loading="lazy"
            class="gallery-image"
          />
        </div>
      ))
    }
  </div>
</div>

<div id="lightbox" class="lightbox">
  <button class="lightbox-close" aria-label="Close lightbox">&times;</button>
  <img id="lightbox-img" src="" alt="" />
</div>

<script>
  function initGallery() {
    const gallery = document.querySelector('.masonry-gallery');
    const lightbox = document.getElementById('lightbox');
    const lightboxImg = document.getElementById('lightbox-img') as HTMLImageElement;
    const closeButton = document.querySelector('.lightbox-close');
    let currentTouchY = 0;
    let initialTouchY = 0;

    // Open lightbox with animation
    gallery?.addEventListener('click', (e) => {
      const target = e.target as HTMLElement;
      if (target.tagName === 'IMG') {
        const src = target.getAttribute('src');
        const alt = target.getAttribute('alt');
        if (lightbox && lightboxImg && src) {
          lightboxImg.src = src;
          lightboxImg.alt = alt || '';
          
          // Add active class after a small delay to trigger animation
          requestAnimationFrame(() => {
            lightbox.classList.add('active');
            document.body.style.overflow = 'hidden';
          });
        }
      }
    });

    // Close lightbox with animation
    const closeLightbox = () => {
      if (lightbox) {
        lightbox.classList.remove('active');
        document.body.style.overflow = '';
        
        // Clear image source after animation
        setTimeout(() => {
          if (lightboxImg) lightboxImg.src = '';
        }, 300);
      }
    };

    closeButton?.addEventListener('click', (e) => {
      e.stopPropagation();
      closeLightbox();
    });

    lightbox?.addEventListener('click', (e) => {
      if (e.target === lightbox) {
        closeLightbox();
      }
    });

    // Mobile swipe to close
    lightbox?.addEventListener('touchstart', (e) => {
      initialTouchY = e.touches[0].clientY;
      currentTouchY = initialTouchY;
    }, { passive: true });

    lightbox?.addEventListener('touchmove', (e) => {
      currentTouchY = e.touches[0].clientY;
      const deltaY = currentTouchY - initialTouchY;
      
      if (deltaY > 0) {
        const opacity = Math.max(0, 1 - (deltaY / window.innerHeight));
        if (lightbox) {
          lightbox.style.opacity = opacity.toString();
        }
      }
    }, { passive: true });

    lightbox?.addEventListener('touchend', () => {
      const deltaY = currentTouchY - initialTouchY;
      
      if (deltaY > 100) {
        closeLightbox();
      } else {
        if (lightbox) {
          lightbox.style.opacity = '';
        }
      }
    });

    // Close on escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        closeLightbox();
      }
    });

    // Preload adjacent images
    const preloadAdjacentImages = (currentIndex: number) => {
      const imagesToPreload = [currentIndex - 1, currentIndex + 1]
        .filter(index => index >= 0 && index < Image.length);

      imagesToPreload.forEach(index => {
        const img = new Image();
        img.src = images[index];
      });
    };
  }

  // Initialize gallery when the page loads
  document.addEventListener('DOMContentLoaded', initGallery);
</script>

<style>
  .container {
    display: flex;
    justify-content: center;
    align-items: center;
    margin: 1rem auto;
    padding: 2rem 0.90rem;
  }

  .masonry-gallery {
    display: grid;
    grid-template-columns: repeat(6, 1fr);
    grid-auto-rows: 200px;
    grid-auto-flow: dense;
    gap: 0.5rem;
    max-width: 1440px;
  }

  .masonry-item {
    position: relative;
    overflow: hidden;
    border-radius: 8px;
    cursor: zoom-in;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .masonry-item:hover {
    transform: scale(1.02);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }

  /* Desktop layout with 2 rows */
  .item-1 {
    grid-column: span 2;
    grid-row: span 2;
  }

  .item-2 {
    grid-column: span 1;
    grid-row: span 1;
  }

  .item-3 {
    grid-column: span 2;
    grid-row: span 1;
  }

  .item-4 {
    grid-column: span 1;
    grid-row: span 1;
  }

  .item-5 {
    grid-column: span 2;
    grid-row: span 1;
  }

  .item-6 {
    grid-column: span 2;
    grid-row: span 2;
  }

  .item-7 {
    grid-column: span 1;
    grid-row: span 1;
  }

  .item-8 {
    grid-column: span 1;
    grid-row: span 1;
  }

  .item-9 {
    grid-column: span 2;
    grid-row: span 1;
  }

  .item-10 {
    grid-column: span 2;
    grid-row: span 1;
  }

  .item-11 {
    grid-column: span 1;
    grid-row: span 1;
  }

  .item-12 {
    grid-column: span 1;
    grid-row: span 1;
  }

  .item-13 {
    grid-column: span 2;
    grid-row: span 1;
  }

  .gallery-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .lightbox {
    display: flex;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.9);
    z-index: 1000;
    opacity: 0;
    pointer-events: none;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    align-items: center;
    justify-content: center;
  }

  .lightbox.active {
    opacity: 1;
    pointer-events: auto;
  }

  .lightbox img {
    max-width: 90%;
    max-height: 90vh;
    object-fit: contain;
    border-radius: 4px;
    transform: scale(0.9);
    opacity: 0;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .lightbox.active img {
    transform: scale(1);
    opacity: 1;
  }

  .lightbox-close {
    position: absolute;
    top: 20px;
    right: 20px;
    background: rgba(255, 255, 255, 0.1);
    border: none;
    color: white;
    font-size: 40px;
    cursor: pointer;
    padding: 10px;
    z-index: 1001;
    border-radius: 50%;
    width: 50px;
    height: 50px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease;
    transform: translateY(-60px);
    opacity: 0;
  }

  .lightbox.active .lightbox-close {
    transform: translateY(0);
    opacity: 1;
  }

  .lightbox-close:hover {
    background: rgba(255, 255, 255, 0.2);
    transform: scale(1.1);
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .container{
      padding: 1rem auto;
    }

    .masonry-gallery {
      grid-template-columns: repeat(2, 1fr);
      grid-auto-rows: 120px;
    }

    .item-1, .item-6, .item-11 {
      grid-column: span 1;
      grid-row: span 1;
    }

    [class*="item-"] {
      grid-column: span 1;
      grid-row: span 1;
    }

    .lightbox-close {
      top: 10px;
      right: 10px;
      font-size: 30px;
      width: 40px;
      height: 40px;
    }
  }

  @media (max-width: 500px) {
    .masonry-gallery {
      grid-template-columns: repeat(2, 1fr);
      grid-auto-rows: 100px;
      gap: 0.25rem;
    }

    .container {
      padding: 0 0.25rem;
      margin: 2rem auto;
    }

    /* Adjust spans for mobile */
    .item-1 {
      grid-column: span 2;
      grid-row: span 1;
    }

    .item-4 {
      grid-column: span 2;
      grid-row: span 1;
    }

    .item-7 {
      grid-column: span 2;
      grid-row: span 1;
    }

    /* Reset all other spans */
    .item-9, .item-11 {
      grid-column: span 1;
      grid-row: span 1;
    }
  }
</style>